// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, password)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2
)
RETURNING id, created_at, updated_at, email, password, is_chirpy_red
`

type CreateUserParams struct {
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Password,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const getUserByMail = `-- name: GetUserByMail :one
SELECT id, created_at, updated_at, email, password, is_chirpy_red from users where email = $1 ORDER BY created_at ASC LIMIT 1
`

func (q *Queries) GetUserByMail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByMail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Password,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByRefreshToken = `-- name: GetUserByRefreshToken :one
SELECT u.id, u.created_at, u.updated_at, u.email, u.password, u.is_chirpy_red
FROM users u
JOIN refresh_tokens rt ON rt.user_id = u.id
WHERE rt.token = $1
  AND (rt.revoked_at IS NULL)
  AND (rt.expires_at > NOW())
`

func (q *Queries) GetUserByRefreshToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByRefreshToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Password,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET email=$2, password = $3,
updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, email, password, is_chirpy_red
`

type UpdateUserParams struct {
	ID       uuid.UUID
	Email    string
	Password string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Password,
		&i.IsChirpyRed,
	)
	return i, err
}

const upgradeUser = `-- name: UpgradeUser :one
UPDATE users SET is_chirpy_red = TRUE,
updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, email, password, is_chirpy_red
`

func (q *Queries) UpgradeUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, upgradeUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Password,
		&i.IsChirpyRed,
	)
	return i, err
}
